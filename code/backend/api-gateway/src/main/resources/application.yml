spring:
  application:
    name: api-gateway
  profiles:
    active: local
  cloud:
    consul:
      host: localhost
      port: 8500
      discovery:
        service-name: api-gateway
        instance-id: ${spring.application.name}:${server.port}
        health-check-path: /actuator/health
        health-check-interval: 15s

management:
  endpoints:
    web:
      exposure:
        include: health, info, metrics, circuitbreakers, circuitbreakerevents, retries, retryevents
  endpoint:
    health:
      show-details: always
    circuitbreakers:
      enabled: true
    circuitbreakerevents:
      enabled: true
    retries:
      enabled: true
    retryevents:
      enabled: true

# Resilience4j Configuration
resilience4j:
  circuitbreaker:
    instances:
      userServiceCircuitBreaker:
        register-health-indicator: true
        sliding-window-size: 10
        minimum-number-of-calls: 5
        permitted-number-of-calls-in-half-open-state: 3
        automatic-transition-from-open-to-half-open-enabled: true
        wait-duration-in-open-state: 10s
        failure-rate-threshold: 50
        slow-call-rate-threshold: 100
        slow-call-duration-threshold: 5s
        record-exceptions:
          - org.springframework.web.client.HttpServerErrorException
          - java.util.concurrent.TimeoutException
          - java.io.IOException
      orderServiceCircuitBreaker:
        register-health-indicator: true
        sliding-window-size: 10
        minimum-number-of-calls: 5
        permitted-number-of-calls-in-half-open-state: 3
        automatic-transition-from-open-to-half-open-enabled: true
        wait-duration-in-open-state: 10s
        failure-rate-threshold: 50
        slow-call-rate-threshold: 100
        slow-call-duration-threshold: 5s
        record-exceptions:
          - org.springframework.web.client.HttpServerErrorException
          - java.util.concurrent.TimeoutException
          - java.io.IOException
      trackingServiceCircuitBreaker:
        register-health-indicator: true
        sliding-window-size: 10
        minimum-number-of-calls: 5
        permitted-number-of-calls-in-half-open-state: 3
        automatic-transition-from-open-to-half-open-enabled: true
        wait-duration-in-open-state: 10s
        failure-rate-threshold: 50
        slow-call-rate-threshold: 100
        slow-call-duration-threshold: 5s
        record-exceptions:
          - org.springframework.web.client.HttpServerErrorException
          - java.util.concurrent.TimeoutException
          - java.io.IOException
      campaignServiceCircuitBreaker:
        register-health-indicator: true
        sliding-window-size: 10
        minimum-number-of-calls: 5
        permitted-number-of-calls-in-half-open-state: 3
        automatic-transition-from-open-to-half-open-enabled: true
        wait-duration-in-open-state: 10s
        failure-rate-threshold: 50
        slow-call-rate-threshold: 100
        slow-call-duration-threshold: 5s
        record-exceptions:
          - org.springframework.web.client.HttpServerErrorException
          - java.util.concurrent.TimeoutException
          - java.io.IOException
  retry:
    instances:
      userServiceRetry:
        max-attempts: 3
        wait-duration: 100ms
        exponential-backoff-multiplier: 2
        retry-exceptions:
          - org.springframework.web.client.HttpServerErrorException
          - java.util.concurrent.TimeoutException
          - java.io.IOException
      orderServiceRetry:
        max-attempts: 3
        wait-duration: 100ms
        exponential-backoff-multiplier: 2
        retry-exceptions:
          - org.springframework.web.client.HttpServerErrorException
          - java.util.concurrent.TimeoutException
          - java.io.IOException
      trackingServiceRetry:
        max-attempts: 3
        wait-duration: 100ms
        exponential-backoff-multiplier: 2
        retry-exceptions:
          - org.springframework.web.client.HttpServerErrorException
          - java.util.concurrent.TimeoutException
          - java.io.IOException

---
spring:
  config:
    activate:
      on-profile: local
  cloud:
    gateway:
      server:
        webflux:
          globalcors:
            cors-configurations:
              "[/**]":
                allowedOriginPatterns: "*"
                allowedMethods:
                  - GET
                  - POST
                  - PUT
                  - DELETE
                  - OPTIONS
                  - HEAD
                  - PATCH
                allowedHeaders:
                  - "*"
                allowCredentials: true
                maxAge: 3600
          discovery:
            locator:
              enabled: true
              lower-case-service-id: true
          routes:
            - id: user-service
              uri: lb://user-service
              predicates:
                - Path=/api/users/**
              filters:
                - StripPrefix=1
                - name: JwtAuthenticationFilter
                  args:
                    exclude-patterns: "/users,/users/login"
                - name: CircuitBreaker
                  args:
                    name: userServiceCircuitBreaker
                    fallbackUri: forward:/fallback/user-service
                - name: Retry
                  args:
                    retries: 3
                    series: SERVER_ERROR
                    methods: GET,POST,PUT,DELETE
                    backoff:
                      firstBackoff: 50ms
                      maxBackoff: 500ms
                      factor: 2
                      basedOnPreviousValue: false
            - id: order-service
              uri: lb://order-service
              predicates:
                - Path=/api/orders/**
              filters:
                - StripPrefix=1
                - name: JwtAuthenticationFilter
                - name: CircuitBreaker
                  args:
                    name: orderServiceCircuitBreaker
                    fallbackUri: forward:/fallback/order-service
                - name: Retry
                  args:
                    retries: 3
                    series: SERVER_ERROR
                    methods: GET,POST,PUT,DELETE
                    backoff:
                      firstBackoff: 50ms
                      maxBackoff: 500ms
                      factor: 2
                      basedOnPreviousValue: false
            - id: tracking-service
              uri: lb://tracking-service
              predicates:
                - Path=/api/tracking/**
              filters:
                - StripPrefix=1
                - name: JwtAuthenticationFilter
                - name: CircuitBreaker
                  args:
                    name: trackingServiceCircuitBreaker
                    fallbackUri: forward:/fallback/tracking-service
                - name: Retry
                  args:
                    retries: 3
                    series: SERVER_ERROR
                    methods: GET,POST,PUT,DELETE
                    backoff:
                      firstBackoff: 50ms
                      maxBackoff: 500ms
                      factor: 2
                      basedOnPreviousValue: false
            - id: campaign-service
              uri: lb://campaign-service
              predicates:
                - Path=/api/campaigns/**
              filters:
                - StripPrefix=1
                - name: JwtAuthenticationFilter
                - name: CircuitBreaker
                  args:
                    name: campaignServiceCircuitBreaker
                    fallbackUri: forward:/fallback/campaign-service
                - name: Retry
                  args:
                    retries: 3
                    series: SERVER_ERROR
                    methods: GET,POST,PUT,DELETE
                    backoff:
                      firstBackoff: 50ms
                      maxBackoff: 500ms
                      factor: 2
                      basedOnPreviousValue: false

server:
  port: 8080

jwt:
  secret: ${JWT_SECRET}

logging:
  level:
    com.tracky.apigateway: DEBUG
    org.springframework.cloud.gateway: DEBUG
    io.github.resilience4j: DEBUG

---
spring:
  config:
    activate:
      on-profile: docker
  cloud:
    consul:
      host: ${CONSUL_HOST:consul}
      port: ${CONSUL_PORT:8500}
      discovery:
        service-name: api-gateway
        instance-id: ${spring.application.name}:${server.port}
        health-check-path: /actuator/health
        health-check-interval: 15s
        hostname: api-gateway
        prefer-ip-address: true
    gateway:
      server:
        webflux:
          globalcors:
            cors-configurations:
              "[/**]":
                allowedOriginPatterns: "*"
                allowedMethods:
                  - GET
                  - POST
                  - PUT
                  - DELETE
                  - OPTIONS
                  - HEAD
                  - PATCH
                allowedHeaders:
                  - "*"
                allowCredentials: true
                maxAge: 3600
          discovery:
            locator:
              enabled: true
              lower-case-service-id: true
          routes:
            - id: user-service
              uri: lb://user-service
              predicates:
                - Path=/api/users/**
              filters:
                - StripPrefix=1
                - name: JwtAuthenticationFilter
                  args:
                    exclude-patterns: "/users,/users/login"
                - name: CircuitBreaker
                  args:
                    name: userServiceCircuitBreaker
                    fallbackUri: forward:/fallback/user-service
                - name: Retry
                  args:
                    retries: 3
                    series: SERVER_ERROR
                    methods: GET,POST,PUT,DELETE
                    backoff:
                      firstBackoff: 50ms
                      maxBackoff: 500ms
                      factor: 2
                      basedOnPreviousValue: false
            - id: order-service
              uri: lb://order-service
              predicates:
                - Path=/api/orders/**
              filters:
                - StripPrefix=1
                - name: JwtAuthenticationFilter
                - name: CircuitBreaker
                  args:
                    name: orderServiceCircuitBreaker
                    fallbackUri: forward:/fallback/order-service
                - name: Retry
                  args:
                    retries: 3
                    series: SERVER_ERROR
                    methods: GET,POST,PUT,DELETE
                    backoff:
                      firstBackoff: 50ms
                      maxBackoff: 500ms
                      factor: 2
                      basedOnPreviousValue: false
            - id: tracking-service
              uri: lb://tracking-service
              predicates:
                - Path=/api/tracking/**
              filters:
                - StripPrefix=1
                - name: JwtAuthenticationFilter
                - name: CircuitBreaker
                  args:
                    name: trackingServiceCircuitBreaker
                    fallbackUri: forward:/fallback/tracking-service
                - name: Retry
                  args:
                    retries: 3
                    series: SERVER_ERROR
                    methods: GET,POST,PUT,DELETE
                    backoff:
                      firstBackoff: 50ms
                      maxBackoff: 500ms
                      factor: 2
                      basedOnPreviousValue: false
            - id: campaign-service
              uri: lb://campaign-service
              predicates:
                - Path=/api/campaigns/**
              filters:
                - StripPrefix=1
                - name: JwtAuthenticationFilter
                - name: CircuitBreaker
                  args:
                    name: campaignServiceCircuitBreaker
                    fallbackUri: forward:/fallback/campaign-service
                - name: Retry
                  args:
                    retries: 3
                    series: SERVER_ERROR
                    methods: GET,POST,PUT,DELETE
                    backoff:
                      firstBackoff: 50ms
                      maxBackoff: 500ms
                      factor: 2
                      basedOnPreviousValue: false

server:
  port: 8080

jwt:
  secret: ${JWT_SECRET:962f8f793fad33fe370eda6ce556c53ae458d6b55f57e27baf7ff43dba3435d1}

logging:
  level:
    com.tracky.apigateway: INFO
