service: campaign-service-serverless

frameworkVersion: "3"

provider:
  name: aws
  runtime: java21
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'dev'}
  architecture: x86_64
  memorySize: 1024
  timeout: 30

  environment:
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
    CAMPAIGN_TABLE: ${self:custom.campaignTable}
    USER_SERVICE_URL: ${self:custom.userServiceUrl}
    SNS_TOPIC_ARN: !Ref CampaignNotificationTopic

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:Query
        - dynamodb:Scan
      Resource:
        - !GetAtt CampaignTable.Arn
        - !Sub "${CampaignTable.Arn}/index/*"
    - Effect: Allow
      Action:
        - sns:Publish
      Resource:
        - !Ref CampaignNotificationTopic
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource: "*"

custom:
  campaignTable: ${self:service}-campaigns-${self:provider.stage}
  userServiceUrl: https://api.tracky.com/users # Replace with actual user service URL

functions:
  createCampaign:
    handler: com.tracky.campaignservice.lambda.CreateCampaignHandler
    package:
      artifact: target/campaign-service-serverless.jar
    events:
      - http:
          path: /campaigns
          method: post
          cors: true
    environment:
      FUNCTION_NAME: createCampaign

  getAllCampaigns:
    handler: com.tracky.campaignservice.lambda.GetAllCampaignsHandler
    package:
      artifact: target/campaign-service-serverless.jar
    events:
      - http:
          path: /campaigns
          method: get
          cors: true
    environment:
      FUNCTION_NAME: getAllCampaigns

resources:
  Resources:
    CampaignTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.campaignTable}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: CreatedAtIndex
            KeySchema:
              - AttributeName: createdAt
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

    CampaignNotificationTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service}-campaign-notifications-${self:provider.stage}
        DisplayName: Campaign Notifications Topic

    CampaignNotificationTopicSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: sqs
        TopicArn: !Ref CampaignNotificationTopic
        Endpoint: !GetAtt CampaignNotificationQueue.Arn

    CampaignNotificationQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-campaign-notifications-${self:provider.stage}
        VisibilityTimeoutSeconds: 300
        MessageRetentionPeriod: 1209600
        ReceiveMessageWaitTimeSeconds: 20

    CampaignNotificationQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref CampaignNotificationQueue
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: sns.amazonaws.com
              Action: sqs:SendMessage
              Resource: !GetAtt CampaignNotificationQueue.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !Ref CampaignNotificationTopic

  Outputs:
    CampaignTable:
      Description: DynamoDB table for campaigns
      Value: !Ref CampaignTable
      Export:
        Name: ${self:service}-campaign-table-${self:provider.stage}

    CampaignNotificationTopicArn:
      Description: SNS Topic ARN for campaign notifications
      Value: !Ref CampaignNotificationTopic
      Export:
        Name: ${self:service}-notification-topic-${self:provider.stage}

    CampaignNotificationQueueUrl:
      Description: SQS Queue URL for campaign notifications
      Value: !Ref CampaignNotificationQueue
      Export:
        Name: ${self:service}-notification-queue-${self:provider.stage}

plugins:
  - serverless-offline
